{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Fox",
	"scopeName": "source.fox",
	"fileTypes": [
		"fox"
	],
	"patterns": [],
	"repository": {
		"null-literal": {
			"name": "constant.language.null.fox",
			"match": "(?<!\\.)\\bnull\\b"
		},
		"boolean-literal-true": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.fox",
					"match": "(?<!\\.)\\btrue\\b"
				}
			]
		},
		"boolean-literal-false": {
			"patterns": [
				{
					"name": "constant.language.boolean.false.fox",
					"match": "(?<!\\.)\\bfalse\\b"
				}
			]
		},
		"numeric-literal-hex": {
			"patterns": [
				{
					"name": "constant.numeric.hex.fox",
					"match": "\\b0(x)[0-9a-f]?\\b"
				}
			]
		},
		"numeric-literal-float": {
			"patterns": [
				{
					"name": "constant.numeric.float.fox",
					"match": "\\b([0-9]+)?\\.[0-9]+((e)[0-9])?\\b"
				}
			]
		},
		"numeric-literal-integer": {
			"patterns": [
				{
					"name": "constant.numeric.integer.fox",
					"match": "(?<!\\.)\\b([0-9](?!\\.))+((e)[0-9])?\\b"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.fox",
			"match": "\\\\."
		},
		"string-literal": {
			"name": "string.quoted.double.fox",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.fox"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.fox"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"char-literal": {
			"name": "string.quoted.single.fox",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.char.begin.fox"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.char.end.fox"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"include": "#boolean-literal-true"
				},
				{
					"include": "#boolean-literal-false"
				}
			]
		},
		"numeric-literal-decimal": {
			"patterns": [
				{
					"include": "#numeric-literal-float"
				},
				{
					"include": "#numeric-literal-integer"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"include": "#numeric-literal-hex"
				},
				{
					"include": "#numeric-literal-decimal"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"include": "#null-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#char-literal"
				}
			]
		},
		"add-operator": {
			"patterns": [
				{
					"name": "keyword.operator.add.fox",
					"match": "\\+"
				}
			]
		},
		"substract-operator": {
			"patterns": [
				{
					"name": "keyword.operator.substract.fox",
					"match": "-"
				}
			]
		},
		"multiply-operator": {
			"patterns": [
				{
					"name": "keyword.operator.multiply.fox",
					"match": "\\*"
				}
			]
		},
		"divide-operator": {
			"patterns": [
				{
					"name": "keyword.operator.divide.fox",
					"match": "/"
				}
			]
		},
		"modulo-operator": {
			"patterns": [
				{
					"name": "keyword.operator.modulo.fox",
					"match": "%"
				}
			]
		},
		"increment-operator": {
			"patterns": [
				{
					"name": "keyword.operator.increment.fox",
					"match": "\\+\\+"
				}
			]
		},
		"decrement-operator": {
			"patterns": [
				{
					"name": "keyword.operator.decrement.fox",
					"match": "--"
				}
			]
		},
		"equals-operator": {
			"patterns": [
				{
					"name": "keyword.operator.equals.fox",
					"match": "=="
				}
			]
		},
		"notequals-operator": {
			"patterns": [
				{
					"name": "keyword.operator.notequals.fox",
					"match": "!="
				}
			]
		},
		"greaterthan-operator": {
			"patterns": [
				{
					"name": "keyword.operator.greaterthan.fox",
					"match": ">"
				}
			]
		},
		"lessthan-operator": {
			"patterns": [
				{
					"name": "keyword.operator.lessthan.fox",
					"match": "<"
				}
			]
		},
		"greaterequals-operator": {
			"patterns": [
				{
					"name": "keyword.operator.greaterequals.fox",
					"match": ">="
				}
			]
		},
		"lessequals-operator": {
			"patterns": [
				{
					"name": "keyword.operator.lessequals.fox",
					"match": "<="
				}
			]
		},
		"not-operator": {
			"patterns": [
				{
					"name": "keyword.operator.not.fox",
					"match": "!"
				}
			]
		},
		"and-operator": {
			"patterns": [
				{
					"name": "keyword.operator.and.fox",
					"match": "&&"
				}
			]
		},
		"or-operator": {
			"patterns": [
				{
					"name": "keyword.operator.or.fox",
					"match": "\\|\\|"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.compound.fox",
					"match": "\\*=|/=|%=|\\+=|-="
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.fox",
					"match": "\\&=|\\^=|<<=|>>=|\\|="
				},
				{
					"name": "keyword.operator.bitwise.shift.fox",
					"match": "<<|>>"
				},
				{
					"name": "keyword.operator.bitwise.fox",
					"match": "\\&|~|\\^|\\|"
				},
				{
					"name": "keyword.operator.assignment.fox",
					"match": "\\="
				}
			]
		},
		"conditional-operator": {
			"begin": "(?<!\\?)\\?(?!\\?|\\.|\\[)",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.conditional.question-mark.fox"
				}
			},
			"end": ":",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.conditional.colon.fox"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"include": "#add-operator"
				},
				{
					"include": "#substract-operator"
				},
				{
					"include": "#multiply-operator"
				},
				{
					"include": "#divide-operator"
				},
				{
					"include": "#modulo-operator"
				},
				{
					"include": "#increment-operator"
				},
				{
					"include": "#decrement-operator"
				},
				{
					"include": "#equals-operator"
				},
				{
					"include": "#notequals-operator"
				},
				{
					"include": "#greaterthan-operator"
				},
				{
					"include": "#lessthan-operator"
				},
				{
					"include": "#greaterequals-operator"
				},
				{
					"include": "#lessequals-operator"
				},
				{
					"include": "#not-operator"
				},
				{
					"include": "#and-operator"
				},
				{
					"include": "#or-operator"
				},
				{
					"include": "#conditional-operator"
				}
			]
		},
		"keywords": {
			"patterns": []
		}
	}
}